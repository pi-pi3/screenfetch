#!/bin/zsh

if [[ $0 = $(which screenfetch) ]]; then
    0='screenfetch'
fi

version='screenfetch 1.1'
usage="Usage: $0 [options] 

Options:
  -a ART          - use ART as the lhs art, where ART is an executable
  -O OS_NAME      - use OS_NAME as the OS label
  -c COLOUR       - use COLOUR for the information colour
  -y YOFFSET      - offset information by YOFFSET
  -S SCRNSHOTTER  - take a screenshot with SCRNSHOTTER
  -s              - take a screenshot
  -n              - don't display art
  -N              - don't display colour
  -L              - display only art
  -p              - portrait mode (prints art above info)
  -h              - prints this message and quits
  -v              - prints version and quits"

usage() {
    print $usage
    exit 1
}

version() {
    print $version
    exit 1
}

printc() {
    label=$1
    text=$2
    colour=$3
    if [[ $nocolour -eq 0 ]] && [[ -n $colour ]]; then
        print -P "%F{$colour}$label:%f $text"
    else
        print "$label: $text"
    fi
}

rep() {
    if [[ $1 -le 0 ]]; then
        return
    fi

    for i in {1..$1}; do print -n $2; done
}

lower() {
    print ${(L)1}
}

# TODO
verbose=0

nocolour=0
noart=0
artonly=0
screenshot=0
portrait=0

screenshotutil='scrot'
colour='yellow'
infcolour=''
defaultart=1
art='%B%F{yellow}GNU/Linux mah freedo%f%b
%B%F{yellow}m GNU/Linux mah free%f%b
%B%F{yellow}dom GNU/Linux mah fr%f%b
%B%F{yellow}eedom GNU/Linux mah %f%b
%B%F{yellow}freedom GNU/Linux ma%f%b
%B%F{yellow}h freedom GNU/Linux %f%b
%B%F{yellow}mah freedom GNU/Linu%f%b
%B%F{yellow}x mah freedom GNU/Li%f%b
%B%F{yellow}nux mah freedom GNU/%f%b
%B%F{yellow}Linux mah freedom GN%f%b
%B%F{yellow}U/Linux mah freedom %f%b
%B%F{yellow}GNU/Linux mah freedo%f%b
%B%F{yellow}m GNU/Linux mah free%f%b
%B%F{yellow}dom GNU/Linux mah fr%f%b
%B%F{yellow}eedom GNU/Linux mah %f%b
%B%F{yellow}freedom GNU/Linux ma%f%b
%B%F{yellow}h freedom GNU/Linux %f%b
%B%F{yellow}mah freedom GNU/Linu%f%b
%B%F{yellow}x mah freedom GNU/Li%f%b
%B%F{yellow}nux mah freedom GNU/%f%b
%B%F{yellow}Linux mah freedom GN%f%b
%B%F{yellow}U/Linux mah freedom %f%b'

while getopts "a:O:c:y:S:nNLwpshVv" arg; do
    case $arg in
        h)
            usage;;
        V)
            version;;
        v)
            verbose=1;;
        n)
            noart=1;;
        N)
            nocolour=1;;
        L)
            artonly=1;;
        p)
            portrait=1;;
        s)
            screenshot=1;;
        S)
            screenshotutil=$OPTARG;;
        a)
            defaultart=0
            art=$OPTARG;;
        O)
            os_name=$OPTARG;;
        c)
            colour=$OPTARG;;
        y)
            y=$OPTARG;;
        *)
            usage;;
    esac
done

if [[ -z $os_name ]]; then
    os_name=$(uname -o)
    if [ -f /etc/lsb-release ] && [ $(lower $(uname)) = 'linux' ]; then
        distro=$(cat /etc/lsb-release | grep "DESCRIPTION" | sed 's/DISTRIB_DESCRIPTION="\(.*\)"/\1/')
    fi
fi
kernel_name=$(print $CPUTYPE $(uname -sr))
uptime=$(uptime | sed 's/.*up\ *\([^,]*\),.*/\1/')
packages=$(pacman -Q | wc -l)
shell=$($SHELL --version)

cpu_name=$(cat /proc/cpuinfo | grep -i -e 'model name' | head -n1 | sed 's/model name\s*:\s*\(.*\)\ *@.*/\1/')
cpu_cores=$(cat /proc/cpuinfo | grep -i -e 'processor' | wc -l)

# if /sys/devices/.../cpuinfo_max_freq is available, we query it, because it's the maximum frequency
if [[ -f /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq ]]; then
    cpu_freq=$(cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq)
    # kHz to GHz
    cpu_freq=$(awk "BEGIN { print $cpu_freq/1000000; exit }")
else
    # frequency taken from the first core only
    cpu_freq=$(cat /proc/cpuinfo | grep -i -e 'cpu MHz' | head -n1 | sed 's/cpu MHz\s*:\s*\(.*\)/\1/')
    # MHz to GHz
    cpu_freq=$(awk "BEGIN { print $cpu_freq/1000; exit }")
fi

# temperature taken from the first core only
cpu_temp=$(sensors | grep -i -e 'Core 0' | head -n1 | sed 's/Core 0:[^0-9]*+\([^CF]*\(C\|F\)\).*/\1/')

memory=$(free -m | head -n2 | tail -n1 | sed 's/Mem:\s*\(\w*\)\s*\(\w*\).*/\2MiB \/ \1MiB/')

info=''

if [[ $nocolour -eq 0 ]] && [[ -n $colour ]]; then
    info=${info}"%F{$colour}$USER%f@%F{$colour}$HOST%f"
else
    info=${info}"$USER@$HOST"
fi
info=${info}"\n"$(printc "OS" $os_name $colour)
if [[ -n $distro ]]; then
    info=${info}"\n"$(printc "Distro" $distro $colour)
fi
info=${info}"\n"$(printc "Kernel" $kernel_name $colour)
info=${info}"\n"$(printc "Uptime" $uptime $colour)
info=${info}"\n"$(printc "Packages" $packages $colour)
info=${info}"\n"$(printc "Shell" $shell $colour)

info=${info}"\n"$(printc "CPU" "$cpu_name @ ${cpu_cores}x${cpu_freq}GHz [$cpu_temp]" $colour)
info=${info}"\n"$(printc "RAM" $memory $colour)

if [[ -n $DISPLAY ]]; then
    gpu_name=$(glxinfo | grep -i -e 'OpenGL renderer string' | sed 's/OpenGL renderer string:\s*//')
    screen0_resolution=$(xrandr | head -n1 | sed 's/.*current \(.*x.*\),.*/\1/')
    window_manager=$(xprop -root -notype | grep -i -e '^_NET_WM_NAME' | sed 's/_NET_WM_NAME = "\(.*\)"/\1/')

    info=${info}"\n"$(printc "GPU" $gpu_name $colour)
    info=${info}"\n"$(printc "Resolution" $screen0_resolution $colour)

    if [[ -n $XDG_CURRENT_DESKTOP ]]; then
        info=${info}"\n"$(printc "DM" $XDG_CURRENT_DESKTOP $colour)
    fi

    info=${info}"\n"$(printc "WM" $window_manager $colour)
fi

if [[ -x /usr/share/screenfetch ]]; then
    defaultart=0
    art=$(. $art)
fi

if [[ -x $HOME/.screenfetch ]]; then
    defaultart=0
    art=$(. $art)
fi

if [[ -x $art ]]; then
    defaultart=0
    art=$(. $art)
fi

# remove all modifiers, like %B and $F{yellow}
x=$(print $art | sed 's/%\w\({[^}]*}\)\{0,1\}//g' | wc -L)
x=$(($x+1))

if [[ -n $y ]] && [[ $y -le -1 ]]; then
    y=$((0 - $y))
    art="$(rep $y "$(rep $(($x-1)) ' ')\n")\n$art"
elif [[ -n $y ]] && [[ $y -ge 1 ]]; then
    info="$(rep $y "\n")\n$info"
fi

if [[ $portrait -eq 1 ]]; then
    print -P $art
    print $(rep $y "\n")
    print -P $info
elif [[ $artonly -eq 1 ]]; then
    print -P $art
elif [[ $noart -eq 0 ]]; then
    while [[ -n $art ]] || [[ -n $info ]]; do
        l=$(echo $art | head -n1)
        r=$(echo $info | head -n1)
        off=$(($x-$(print $l | sed 's/%\w\({[^}]*}\)\{0,1\}//g' | wc -m)))
        print -P "$l$(rep $off ' ') $r"
        # remove first line
        info=$(echo $info | tail -n$(($(echo $info | wc -l)-1)))
        art=$(echo $art | tail -n$(($(echo $art | wc -l)-1)))

        [[ $defaultart -eq 1 ]] && [[ -z $info ]] && break
    done
else
    print -P $info
fi

if [[ $screenshot -eq 1 ]]; then
    SH_WORD_SPLIT=1
    exec $screenshotutil
fi
